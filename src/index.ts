import express from 'express';
import { setupApp } from './setup-app';
import { SETTINGS } from "./core/settings/settings";
import { runDB } from "./db/db";

let isInitialized = false;
let appInstance: express.Application;

export const initApp = async (): Promise<express.Application> => {
  if (!isInitialized) {
    const app = express();
    setupApp(app);

    console.log('üîÑ Connecting to database...');
    await runDB(SETTINGS.MONGO_URL);
    console.log('‚úÖ Database connected');

    appInstance = app;
    isInitialized = true;

    console.log('‚úÖ App initialized');
  }

  return appInstance;
};

// ‚úÖ –¢–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –ù–ï –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
export default initApp;

// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
if (require.main === module) {
  // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞
  initApp()
      .then((app) => {
        const PORT = SETTINGS.PORT;
        app.listen(PORT, () => {
          console.log(`üöÄ Server listening on port ${PORT}`);
        });
      })
      .catch((error) => {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
      });
}
